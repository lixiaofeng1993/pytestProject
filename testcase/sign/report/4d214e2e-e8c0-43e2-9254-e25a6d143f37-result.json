{"name": "test_sign_case", "status": "failed", "statusDetails": {"message": "AssertionError: 接口返回字段 isLogicalDelete 断言错误！", "trace": "self = <testcase.sign.test_sign_case.TestSignCase object at 0x0000020EA2ABDA90>\ntest_data = <public.case_step.ObjectData object at 0x0000020EA2B6C588>\n\n>   ???\n\nE:\\project\\pytestProject\\testcase\\sign\\test_sign_case.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\public\\send_request.py:73: in send_request\n    validators_result(result, validate)  # 断言\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresult = <base.base_result.BaseResult object at 0x0000020EA2BC4BE0>\nvalidate = [[{'comparator': 'equal'}, {'check': 'isLogicalDelete'}, {'expect': '0'}, {'jsonpath': '$.attachment.result.isLogicalDelete'}]]\n\n    def validators_result(result, validate: list):\n        \"\"\"\n        断言\n        :param result:\n        :param validate:\n        :return:\n        \"\"\"\n        try:\n            validate = validate if validate and validate[0] else []\n        except (IndexError, KeyError):\n            validate = []\n        response = result.text\n        checkpoint_list = list()\n        if not validate:\n            checkpoint_list = [{\"comparator\": \"equal\", \"check\": \"status_code\", \"expect\": \"200\", \"jsonpath\": \"\"}]\n        elif isinstance(validate, list):\n            for val in validate:\n                checkpoint = dict()\n                if isinstance(val, list):\n                    for v in val:\n                        checkpoint.update(v)\n                checkpoint_list.append(checkpoint)\n        for checkpoint in checkpoint_list:\n            if isinstance(checkpoint, dict):\n                comparator = checkpoint[\"comparator\"] if checkpoint.get(\"comparator\") else \"\"\n                check = checkpoint.get(\"check\")\n                expect = checkpoint.get(\"expect\")\n                path = checkpoint[\"jsonpath\"] if checkpoint.get(\"jsonpath\") else \"\"\n                if check == \"status_code\":\n                    check_field = result.status_code\n                elif path:\n                    check_field = jsonpath(response, path)\n                else:\n                    check_field = default_extract(response, check)\n                logger.info(f\"断言方式：{comparator} 断言字段：{check} ==>> 断言值：{expect} ==>> 期望值：{check_field}\")\n                expect = expect if isinstance(expect, str) else str(expect)\n                if comparator == \"equal\":\n                    if isinstance(check_field, list):\n                        for field in check_field:\n                            field = str(field) if not isinstance(field, str) else field\n                            assert field == expect, error_msg(check)\n                    else:\n                        check_field = check_field if isinstance(check_field, str) else str(check_field)\n>                       assert check_field == expect, error_msg(check)\nE                       AssertionError: 接口返回字段 isLogicalDelete 断言错误！\n\n..\\..\\public\\common.py:256: AssertionError"}, "steps": [{"name": "加密返回值接口测试", "status": "passed", "start": 1651822372543, "stop": 1651822372543}], "attachments": [{"name": "log", "source": "b5827944-231b-484b-92fe-f861cad18a10-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "44185a35-64f6-4adc-b556-b8e2c6e59aba-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7b8dabc8-d256-4ed8-ae4c-975ec6574cd6-attachment.txt", "type": "text/plain"}], "start": 1651822372542, "stop": 1651822375680, "uuid": "ba08f2ae-a4b6-486e-a8f4-f186c415efbb", "historyId": "35539bf0e0bd188ecb3b9444f8197a6f", "testCaseId": "1448b8ce995c7ea146d3c02cf6ee9cd7", "fullName": "testcase.sign.test_sign_case.TestSignCase#test_sign_case", "labels": [{"name": "feature", "value": "加密返回值接口"}, {"name": "epic", "value": "EasyTest项目"}, {"name": "severity", "value": "trivial"}, {"name": "parentSuite", "value": "testcase.sign"}, {"name": "suite", "value": "test_sign_case"}, {"name": "subSuite", "value": "TestSignCase"}, {"name": "host", "value": "DESKTOP-G0K0B6T"}, {"name": "thread", "value": "19156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.sign.test_sign_case"}]}